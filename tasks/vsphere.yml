- name: Authenticate with vCenter API
  uri:
    url: "https://{{ target.vcenter_api_url }}/rest/com/vmware/cis/session"
    method: POST
    user: "{{ target.vcenter_username }}"
    password: "{{ target.vcenter_password }}"
    force_basic_auth: yes
    validate_certs: "{{ target.validate_certs }}"
  register: login

- name: Get Data Centers by API
  uri:
    url: "https://{{ target.vcenter_api_url }}/rest/vcenter/datacenter"
    method: GET
    headers:
      vmware-api-session-id: "{{ login.json.value }}"
    validate_certs: "{{ target.validate_certs }}"
  register: datacenters

- name: Get Clusters by API
  uri:
    url: "https://{{ target.vcenter_api_url }}/rest/vcenter/cluster"
    method: GET
    headers:
      vmware-api-session-id: "{{ login.json.value }}"
    validate_certs: "{{ target.validate_certs }}"
  register: clusters

- name: Get Hosts by API
  uri:
    url: "https://{{ target.vcenter_api_url }}/rest/vcenter/host"
    method: GET
    headers:
      vmware-api-session-id: "{{ login.json.value }}"
    validate_certs: "{{ target.validate_certs }}"
  register: hosts

- name: Get Virtual Machines by API
  uri:
    url: "https://{{ target.vcenter_api_url }}/rest/vcenter/vm"
    method: GET
    headers:
      vmware-api-session-id: "{{ login.json.value }}"
    validate_certs: "{{ target.validate_certs }}"
  register: virtual_machines

- name: Get Datastores by API
  uri:
    url: "https://{{ target.vcenter_api_url }}/rest/vcenter/datastore"
    method: GET
    headers:
      vmware-api-session-id: "{{ login.json.value }}"
    validate_certs: "{{ target.validate_certs }}"
  register: datastores

- name: Get Networks by API
  uri:
    url: "https://{{ target.vcenter_api_url }}/rest/vcenter/network"
    method: GET
    headers:
      vmware-api-session-id: "{{ login.json.value }}"
    validate_certs: "{{ target.validate_certs }}"
  register: networks

- name: Gather information about all folders with vmware_folder_info
  vmware_folder_info:
    validate_certs: "{{ target.validate_certs }}"
    hostname: "{{ target.vcenter_api_url }}"
    username: "{{ target.vcenter_username }}"
    password: "{{ target.vcenter_password }}"
    datacenter: "{{ item.name }}"
  loop: "{{ datacenters.json.value }}"
  register: folders_info

- name: Debug - Print folders_info
  debug:
    var: folders_info
  when: debug_vars

- name: Extract and filter folder names
  set_fact:
    vm_folders: "{{ folders_info.results[0].flat_folder_info | map(attribute='path') | select('search', '/vm/') | map('regex_replace', '.*/vm/', '') | reject('search', 'vCLS') | list }}"
  when: debug_vars

- name: Debug - Print final folder names
  debug:
    var: vm_folders
  when: debug_vars

- name: Output Results from API requests
  debug:
    msg:
      - "Data Centers: {{ datacenters.json.value }}"
      - "Clusters: {{ clusters.json.value }}"
      - "Hosts: {{ hosts.json.value }}"
      - "Virtual Machines: {{ virtual_machines.json.value }}"
      - "Datastores: {{ datastores.json.value }}"
      - "Networks: {{ networks.json.value }}"
  when: debug_vars

- name: Set Facts from Output Results and filter with regex
  set_fact:
    data_centers: "{{ datacenters.json.value | map(attribute='name') | select('search', target.datacenter_regex | default('.*') ) | list }}"
    clusters: "{{ clusters.json.value | map(attribute='name') | select('search', target.cluster_regex | default('.*') ) | list }}"
    hosts: "{{ hosts.json.value | map(attribute='name') | select('search', target.host_regex | default('.*') ) |list }}"
    datastores: "{{ datastores.json.value | map(attribute='name') | select('search', target.datastore_regex | default('.*') ) | list }}"
    networks: "{{ networks.json.value | map(attribute='name') | select('search', target.network_regex | default('.*') ) | list }}"
    vms: "{{ virtual_machines.json.value | map(attribute='name') | reject('search', 'vCLS') | select('search', target.vm_regex | default('.*') ) | list }}"

- name: Output the final Facts
  debug:
    msg: 
      - "Ressource Name: {{ target.ressource_name }}"
      - "Type: {{ target.type }}"
      - "Data Centers: {{ data_centers }}"
      - "Clusters: {{ clusters }}"
      - "Hosts: {{ hosts }}"
      - "Virtual Machines: {{ vms }}"
      - "Datastores: {{ datastores }}"
      - "Networks: {{ networks }}"
      - "Virtual Machine Folders: {{ vm_folders }}"
      - "Absolute Virtual Machine Folders: {{ vm_folders }}"
  when: debug_vars

- name: Create and append final ressource_inventory
  set_fact:
    ressource_inventory: "{{ ressource_inventory | default({}) | combine({ target.ressource_name: {
          'type': target.type,
          'vcenter_fqdn': target.vcenter_api_url,
          'data_centers': data_centers,
          'clusters': clusters,
          'hosts': hosts,
          'vms': vms,
          'datastores': datastores,
          'networks': networks,
          'vm_folders': vm_folders
        } }) }}"

- name: Debug - Print ressource_inventory
  debug:
    var: ressource_inventory
  when: debug_vars
