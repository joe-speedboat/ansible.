- name: Get Hosts by API for cluster {{ cluster.name }}
  uri:
    url: "https://{{ target.vcenter_api_url }}/rest/vcenter/host?filter.clusters={{ cluster.cluster }}"
    method: GET
    headers:
      vmware-api-session-id: "{{ login.json.value }}"
    validate_certs: "{{ target.validate_certs }}"
  register: hosts

- name: Debug - Print all hosts hosts of cluster {{ cluster.name }}
  debug:
    var: hosts
  when: debug_vars

- name: select hosts that are connected, we do not care about others
  set_fact:
    hosts: "{{ hosts.json.value | selectattr('connection_state', 'equalto', 'CONNECTED') | list }}"

- name: Debug - Print connected hosts of cluster {{ cluster.name }}
  debug:
    var: hosts
  when: debug_vars

- name: Gather some info from a datastore using the vSphere API output schema
  community.vmware.vmware_datastore_info:
    hostname: '{{ target.vcenter_api_url }}'
    username: '{{ target.vcenter_username }}'
    password: '{{ target.vcenter_password }}'
    cluster: '{{ cluster.name }}'
    schema: vsphere
    validate_certs: "{{ target.validate_certs }}"
    properties:
      - name
      - summary.freeSpace
      - summary.multipleHostAccess
  delegate_to: localhost
  register: datastores

- name: Debug - Print datastores
  debug:
    var: datastores
  when: debug_vars

- name: Gather portgroup info (Networks) for hosts of cluster={{ cluster.name }}
  community.vmware.vmware_portgroup_info:
    hostname: '{{ target.vcenter_api_url }}'
    username: '{{ target.vcenter_username }}'
    password: '{{ target.vcenter_password }}'
    esxi_hostname: '{{ host.name }}'
    validate_certs: "{{ target.validate_certs }}"
  delegate_to: localhost
  register: portgroup_info
  loop: "{{ hosts | selectattr('name', 'match', target.host_regex|default('.*')) }}"
  loop_control:
    loop_var: host

- name: initialize host_networks
  set_fact:
    host_networks: []

- name: Extract portgroup names from each host (Networks) 
  set_fact:
    host_networks: "{{ host_networks + [item.hosts_portgroup_info[item.host.name] | map(attribute='portgroup') | list | reject('search', 'VM Network') | reject('search', 'Management Network') | reject('match', 'VMkernel.*') | reject('match', 'RoCE_.*') | list ] }}"
  loop: "{{ portgroup_info.results }}"

- name: Initialize networks with the first host's networks
  set_fact:
    networks: "{{ host_networks | first }}"

- name: Find common networks across all hosts
  set_fact:
    networks: "{{ networks | intersect(host_networks[item]) }}"
  loop: "{{ range(1, host_networks | length) }}"
  loop_control:
    index_var: item

- name: Debug - Print networks
  debug:
    var: networks
  when: debug_vars

- name: Create and append hosts to ressource_inventory
  set_fact:
    fact_inventory: "{{ fact_inventory | default({}) | combine({ target.ressource_name: {
          'data_centers': {
            data_center.name: {
              'clusters': {
                cluster.name: {
                  'hosts': {
                    host.name: {
                      'name': host.name,
                      'type': 'host'
                    }
                  }
                }
              }
            }
          }
        } }, recursive=True) }}"
  loop: "{{ hosts | selectattr('name', 'match', target.host_regex|default('.*')) }}"
  loop_control:
    loop_var: host

- name: Create and append datastores to ressource_inventory
  set_fact:
    fact_inventory: "{{ fact_inventory | default({}) | combine({ target.ressource_name: {
          'data_centers': {
            data_center.name: {
              'clusters': {
                cluster.name: {
                  'datastores': {
                    datastore.name: {
                      'name': datastore.name,
                      'multipleHostAccess': datastore.summary.multipleHostAccess,
                      'free_space_gb': ((datastore.summary.freeSpace / 1024 / 1024 / 1024 )|int),
                      'type': 'datastore'
                    }
                  }
                }
              }
            }
          }
        } }, recursive=True) }}"
  loop: "{{ datastores.datastores | selectattr('name', 'match', target.datastore_regex|default('.*')) }}"
  loop_control:
    loop_var: datastore

- name: Create and append networks to ressource_inventory
  set_fact:
    fact_inventory: "{{ fact_inventory | default({}) | combine({ target.ressource_name: {
          'data_centers': {
            data_center.name: {
              'clusters': {
                cluster.name: {
                  'networks': {
                    network: {
                      'name': network,
                      'type': 'network'
                    }
                  }
                }
              }
            }
          }
        } }, recursive=True) }}"
  loop: "{{ networks | select('match', target.network_regex|default('.*')) | list }}"
  loop_control:
    loop_var: network

- name: Debug - Print fact_inventory
  debug:
    var: fact_inventory
  when: debug_vars
